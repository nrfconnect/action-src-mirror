name: 'Synchronize Source'
description: 'Checkout, pack, and upload source code to Artifactory'
inputs:
  git-ref:
    description: 'Branch, tag or SHA to checkout'
    required: true
  git-fetch-depth:
    description: 'Git fetch depth (0 = full history, 1 = shallow)'
    required: false
    default: '0'
  path:
    description: 'Directory to checkout sources into'
    required: false
    default: ''
  west-update-args:
    description: 'Arguments to pass to `west update`'
    required: false
    default: ''
  artifactory-url:
    description: 'Base URL of Artifactory'
    required: false
    default: 'https://eu.files.nordicsemi.com'
  artifactory-base-folder-path:
    description: 'Artifactory upload folder path'
    required: true
  artifactory-user:
    description: 'Artifactory username (pass as workflow secret)'
    required: true
  artifactory-pass:
    description: 'Artifactory password or API key (pass as workflow secret)'
    required: true
  stable:
    description: 'Set to true to mark the new entry as stable'
    required: false
    default: 'false'
  sdk-manager-api-version:
    description: 'SDK Manager API version'
    required: false
    default: '2'
  repository-type:
    description: '(Only for SDK Manager API version=2) Repository type'
    required: false
    default: ''
  toolchain-version:
    description: '(Only for SDK Manager API version=2) If not set, the version will be determined based on sdk-nrf revision.'
    required: false
    default: ''

runs:
  using: composite
  steps:
    - name: Remove trailing slash if present
      shell: bash
      run: |
       CLEAN_PATH="${{ inputs.artifactory-base-folder-path }}"
       CLEAN_PATH="${CLEAN_PATH%/}"
       echo "ARTIFACTORY_BASE_FOLDER_PATH_CLEAN=$CLEAN_PATH" >> $GITHUB_ENV


    - name: Checkout sources
      uses: nrfconnect/action-checkout-west-update@main
      with:
        git-ref: ${{ inputs.git-ref }}
        git-fetch-depth: ${{ inputs.git-fetch-depth }}
        path: workspace/${{ inputs.path }}
        west-update-args: ${{ inputs.west-update-args }}

    - name: Find proper toolchain version
      if: ${{ inputs.sdk-manager-api-version == '2' && !inputs.toolchain-version }}
      shell: bash
      run: |
        set -euo pipefail
        cd "workspace"
        TOOLCHAIN_CHECKSUM="$(./nrf/scripts/print_toolchain_checksum.sh)"
        echo "TOOLCHAIN_CHECKSUM=${TOOLCHAIN_CHECKSUM}"

        TOOLCHAIN_INDEX_URL="https://files.nordicsemi.com/artifactory/NCS/external/bundles/v3/index-linux-x86_64.json"
        curl -fsSL "${TOOLCHAIN_INDEX_URL}" -o toolchains.json

        VERSION_STRICT="$(jq -r --arg cs "$TOOLCHAIN_CHECKSUM" '[ .[] | select((.json_api_version == 2) and (.metadata.version == $cs) and (.key | test("^v[0-9]+\\.[0-9]+\\.[0-9]+$"))) | .key ] | .[-1] // empty' toolchains.json)"
        if [[ -n "${VERSION_STRICT}" ]]; then
          TOOLCHAIN_VERSION="${VERSION_STRICT}"
        else
          VERSION_LOOSE="$(jq -r --arg cs "$TOOLCHAIN_CHECKSUM" '[ .[] | select((.json_api_version == 2) and (.metadata.version == $cs) and (.key | test("^v[0-9]+\\.[0-9]+\\.[0-9]+.*$"))) | .key ] | .[-1] // empty' toolchains.json)"
          if [[ -n "${VERSION_LOOSE}" ]]; then
            TOOLCHAIN_VERSION="${VERSION_LOOSE}"
          else
            echo "Error: No toolchain version found for checksum ${TOOLCHAIN_CHECKSUM}" >&2
            exit 1
          fi
        fi

        echo "TOOLCHAIN_VERSION=${TOOLCHAIN_VERSION}" >> "$GITHUB_ENV"
        echo "Resolved TOOLCHAIN_VERSION=${TOOLCHAIN_VERSION}"

    - name: Set TOOLCHAIN_VERSION from input
      if: ${{ inputs.toolchain-version != '' }}
      shell: bash
      run: |
        echo "TOOLCHAIN_VERSION=${{ inputs.toolchain-version }}" >> "$GITHUB_ENV"
        echo "TOOLCHAIN_VERSION set from input: ${{ inputs.toolchain-version }}"

    - name: Prepare repository and generate archive
      shell: bash
      run: |
        cd "workspace/${{ inputs.path }}"

        # Configure git for better performance
        git config --global pack.windowMemory "128m"
        git config --global core.bigFileThreshold "20m"

        # Generate safe filename
        WEST_ARG_SAFE="$(echo "${{ inputs.west-update-args }}" | tr ' ' '_')"
        FILE="${GITHUB_REPOSITORY##*/}-${GITHUB_REF_NAME//\//-}${WEST_ARG_SAFE:+-$WEST_ARG_SAFE}"
        echo "FILE=${FILE}" >> $GITHUB_ENV

        # Remove unnecessary files
        west forall -c 'git gc --prune=now --aggressive'

    - name: Create tar archive
      shell: bash
      run: tar -C workspace -czvf "${FILE}.tar.gz" . > /dev/null

    - name: Temporarily store artifact
      uses: actions/upload-artifact@v4
      with:
        path: workspace
        name: ${{ env.FILE }}
        include-hidden-files: true
        compression-level: 9

    - name: End workflow if event is workflow_dispatch
      if: |
        github.event_name == 'workflow_dispatch' &&
        contains(env.ARTIFACTORY_BASE_FOLDER_PATH_CLEAN, 'external')
      shell: bash
      run: |
        echo "Manual workflow executions are not allowed to push to external"
        exit 1

    - name: Set up JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4.5.11

    - name: Setup artifactory server
      shell: bash
      run: |
        jfrog c add temp --interactive=false \
              --url=${{ inputs.artifactory-url }} \
              --user=${{ inputs.artifactory-user }} \
              --password=${{ inputs.artifactory-pass }}
        jfrog c use temp
        jfrog rt ping

    - name: Upload to Artifactory
      shell: bash
      run: |
        V1_SRC_ARTIFACTORY_PATH="${ARTIFACTORY_BASE_FOLDER_PATH_CLEAN}/${{ github.ref_name }}/src.tar.gz"
        V2_SRC_ARTIFACTORY_PATH="${ARTIFACTORY_BASE_FOLDER_PATH_CLEAN}/${{ github.event.repository.name }}/${{ github.ref_name }}/src.tar.gz"
        if [[ "${{ inputs.sdk-manager-api-version }}" == "1" ]]; then
          SRC_ARTIFACTORY_PATH=${V1_SRC_ARTIFACTORY_PATH}
        else
          SRC_ARTIFACTORY_PATH=${V2_SRC_ARTIFACTORY_PATH}
        fi
        echo "SRC_ARTIFACTORY_PATH=${SRC_ARTIFACTORY_PATH}"
        jfrog rt u ${FILE}.tar.gz ${SRC_ARTIFACTORY_PATH} --fail-no-op
        if [[ "tag" == "${{ github.ref_type }}" ]]; then
          jfrog ds rbc "${{ github.event.repository.name }}" "${{ github.ref_name }}" \
                       "${SRC_ARTIFACTORY_PATH}"
          jfrog ds rbs "${{ github.event.repository.name }}" "${{ github.ref_name }}"
          jfrog ds rbd "${{ github.event.repository.name }}" "${{ github.ref_name }}" \
                       --create-repo \
                       --country-codes 'CN'
        fi
        if [[ "${{ inputs.sdk-manager-api-version }}" == "1" ]]; then
          jfrog rt cp --fail-no-op --flat $V1_SRC_ARTIFACTORY_PATH $V2_SRC_ARTIFACTORY_PATH 
        fi

    - name: Download index.json
      shell: bash
      run: |
        INDEX_ARTIFACTORY_PATH="${ARTIFACTORY_BASE_FOLDER_PATH_CLEAN}/sdk-manager/index.json"
        echo "INDEX_ARTIFACTORY_PATH=${INDEX_ARTIFACTORY_PATH}" >> $GITHUB_ENV
        jf rt download ${INDEX_ARTIFACTORY_PATH} index.json --quiet --flat --fail-no-op 
        cp index.json index.json.bak

    - name: Upload index.json backup
      uses: actions/upload-artifact@v4
      with:
        name: index.json.bak
        path: index.json.bak

    - name: Update index.json
      shell: bash
      run: |
        VERSION="${{ github.ref_name }}"
        STABLE_FLAG=""
        if [[ "${{ inputs.stable }}" == "true" ]]; then
          STABLE_FLAG="--stable"
        fi
        
        API_VERSION_FLAG="--api-version ${{ inputs.sdk-manager-api-version }}"
        REPO_TYPE_FLAG=""
        if [[ "${{ inputs.sdk-manager-api-version }}" == "2" ]] && [[ -n "${{ inputs.repository-type }}" ]]; then
          REPO_TYPE_FLAG="--repository-type ${{ inputs.repository-type }}"
        fi

        TOOLCHAIN_VERSION_FLAG=""
        if [[ -n "${TOOLCHAIN_VERSION:-}" ]]; then
          TOOLCHAIN_VERSION_FLAG="--toolchain-version ${TOOLCHAIN_VERSION}"
        fi
        
        python3 "${{ github.action_path }}/index_manager.py" \
          --index index.json \
          --src-file "${FILE}.tar.gz" \
          --version "${VERSION}" \
          $STABLE_FLAG \
          $API_VERSION_FLAG \
          $REPO_TYPE_FLAG $TOOLCHAIN_VERSION_FLAG
        jfrog rt u index.json ${{env.INDEX_ARTIFACTORY_PATH}} --fail-no-op

    - name: Remove artifactory server
      if: |
        always()
      shell: bash
      run: |
        jfrog c rm temp --quiet
